openapi: 3.0.0

info:
  title: Delilah Resto API
  description: Food delivery
  version: 1.0.0
  
servers:
  - url: https://api.delilah.com/v1
  
tags:
- name: "Products"
  description: "Operations about products"
- name: "Users"
  description: "Operations about users"
- name: "Orders"
  description: "Operations about orders"
 
paths:

  /products:
  
    get:
      tags:
        - "Products"
      summary: Returns a list of products.
      security:
        - tokenAuthorization: []
      parameters:
        - in: header
          name: token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: JSON array of products
          content:
            application/json:
              schema: 
                type: array
                items: 
                  type: object
                  properties:
                    id:
                      type: number
                    name:
                      type: string
                    keyword:
                      type: string
                    price:
                      type: number
                    photoUrl:
                      type: string
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/tokenMissing'
        '500':
          description: Internal server error
                  
    post:
      tags:
        - "Products"
      summary: Creates a product.
      security:
        - tokenAuthorization: []
      parameters:
        - in: header
          name: token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                keyword:
                  type: string
                price:
                  type: number
                photoUrl:
                  type: string
      responses: 
        '201':
          description: Product created
          content:
            application/json:
              schema: 
                type: object
                properties:
                  id:
                    type: number
                  name:
                    type: string
                  keyword:
                    type: string
                  price:
                    type: number
                  photoUrl:
                    type: string
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/tokenMissing'
        '409':
          description: Product already exists
        '500':
          description: Internal server error
          
                  
  /products/{productId}:
    get:
      tags:
        - "Products"
      summary: Returns a product by ID.
      security:
        - tokenAuthorization: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
        - in: header
          name: token
          required: true
          schema:
            type: string
      responses: 
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: number
                  name:
                    type: string
                  keyword:
                    type: string
                  price:
                    type: number
                  photoUrl:
                    type: string
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/tokenMissing'
        '404':
          description: Product not found
        '500':
          description: Internal server error
          
    put:
      tags:
        - "Products"
      summary: Modifies a product by ID.
      security:
        - tokenAuthorization: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
        - in: header
          name: token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                keyword:
                  type: string
                price:
                  type: number
                photoUrl:
                  type: string
      responses: 
        '200':
          description: Modified product
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: number
                  name:
                    type: string
                  keyword:
                    type: string
                  price:
                    type: number
                  photoUrl:
                    type: string
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/tokenMissing'
        '404':
          description: Product not found
        '500':
          description: Internal server error
          
    delete:
      tags:
        - "Products"
      summary: Deletes a product by ID.
      security:
        - tokenAuthorization: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
        - in: header
          name: token
          required: true
          schema:
            type: string
      responses: 
        '204':
          description: Product deleted
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/tokenMissing'
        '404':
          description: Product not found
        '500':
          description: Internal server error
    
    
  /users:
  
    get:
      tags:
        - "Users"
      summary: Returns a list of users.
      security:
        - tokenAuthorization: []
      parameters:
        - in: header
          name: token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: JSON array of users
          content:
            application/json:
              schema: 
                type: array
                items: 
                  type: object
                  properties:
                    id:
                      type: number
                    userName:
                      type: string
                    admin:
                      type: boolean
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/tokenMissing'
        '500':
          description: Internal server error
          
    post:
      tags:
        - "Users"
      summary: Creates a user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                userName:
                  type: string
                email:
                  type: string
                address:
                  type: string
                phoneNumber:
                  type: number
                password:
                  type: string
      responses: 
        '201':
          description: User created
          content:
            application/json:
              schema: 
                type: object
                properties:
                  id:
                    type: number
                  name:
                    type: string
                  userName:
                    type: string
                  email:
                    type: string
                  address:
                    type: string
                  phoneNumber:
                    type: number
                  admin:
                    type: boolean
                    default: false
                  
        '400':
          description: Bad request
        '409':
          description: User already exists
        '500':
          description: Internal server error
          
          
  /users/admin:
  
    post:
      tags:
        - "Users"
      security:
        - ApiKeyAuthorization: [] 
      summary: Creates an admin user.
      parameters:
        - name: api_key
          in: query
          required: true
          schema:
            type : string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                userName:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses: 
        '201':
          description: User created
          content:
            application/json:
              schema: 
                type: object
                properties:
                  id:
                    type: number
                  name:
                    type: string
                  userName:
                    type: string
                  email:
                    type: string
                  admin:
                    type: boolean
                    default: true
                  
        '400':
          description: Bad request
        '401':
          description: API key is missing or invalid
        '409':
          description: User already exists
        '500':
          description: Internal server error
        
          
  /users/login:
    
    post:
      tags:
        - "Users"
      summary: User login.
      requestBody:
        required: true
        content:
          application/json:
            schema:
                oneOf:
                - $ref: '#/components/schemas/userLogin'
                - $ref: '#/components/schemas/emailLogin'
            example:
              username or email: user
              password: password
                  
      responses: 
        '200':
          description: Login successful
          content:
            application/json:
              schema: 
                type: object
                properties: #revisar
                  token:
                    type: string
                  id:
                    type: number
                  userName:
                    type: string
                  admin:
                    type: boolean
                  
        '400':
          description: Bad request / wrong user or password
        '500':
          description: Internal server error
    
  
components:

  schemas:
  
    userLogin:
      type: object
      properties:
        userName:
          type: string
        password:
          type: string
          
    emailLogin:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
          
  securitySchemes:
    ApiKeyAuthorization:
      type: apiKey
      in: query
      name: API-KEY
      
    tokenAuthorization:
      type: http
      scheme: bearer
      
  responses:
    tokenMissing:
      description: Token missing or invalid
    
          
 