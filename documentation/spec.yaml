openapi: 3.0.0

info:
  title: Delilah Resto API
  description: Food delivery
  version: 1.0.0

  
tags:
- name: "Products"
  description: "Operations about products"
- name: "Users"
  description: "Operations about users"
- name: "Orders"
  description: "Operations about orders"
 
paths:

  /products:
  
    get:
      tags:
        - "Products"
      summary: "Returns a list of products."
      description: "This can only be done by the logged in user."
      security:
        - tokenAuthorization: []
      responses:
        '200':
          description: "JSON array of products"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: 
                      $ref: '#/components/schemas/productData'
        '401':
          $ref: '#/components/responses/invalidToken'
        '500':
          $ref: '#/components/responses/serverError'
                  
    post:
      tags:
        - "Products"
      summary: "Creates a product."
      security:
        - tokenAuthorization: []
      description: "Role required: Admin"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                keyword:
                  type: string
                price:
                  type: number
                  format: double
                  minimum: 0
                photo_url:
                  type: string
                stock:
                  type: integer
                  minimum: 0
      responses: 
        '201':
          description: "Product created"
          content:
            application/json:
              schema: 
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/productData'
        '400':
          description: "Request body incomplete or malformed"
        '401':
          $ref: '#/components/responses/invalidToken'
        '403':
          $ref: '#/components/responses/forbidden'
        '409':
          description: "Product already exists"
        '422':
          $ref: '#/components/responses/invalid'
        '500':
          $ref: '#/components/responses/serverError'
          
   
  /products/{productId}:
    get:
      tags:
        - "Products"
      summary: Returns a product by ID.
      security:
        - tokenAuthorization: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type : integer
            minimum: 1
      responses: 
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/productData'
        '401':
          $ref: '#/components/responses/invalidToken'
        '404':
          description: "Product not found"
        '500':
          $ref: '#/components/responses/serverError'
          
    patch:
      tags:
        - "Products"
      summary: Updates a product by ID.
      description: "Role required: Admin"
      security:
        - tokenAuthorization: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type : integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                keyword:
                  type: string
                price:
                  type: number
                  format: double
                  minimum: 0
                photo_url:
                  type: string
                stock:
                  type: integer
                  minimum: 0
      responses: 
        '200':
          description: Product updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/productData'
        '400':
          description: "At least one valid property is required"
        '401':
          $ref: '#/components/responses/invalidToken'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          description: "Product not found"
        '409':
          description: "Another product with the same name or keyword exists"
        '422':
          $ref: '#/components/responses/invalid'
        '500':
          $ref: '#/components/responses/serverError'
          
    delete:
      tags:
        - "Products"
      summary: Deletes a product by ID.
      description: "Role required: Admin"
      security:
        - tokenAuthorization: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type : integer
            minimum: 1
      responses: 
        '204':
          description: "Product deleted"
        '401':
          $ref: '#/components/responses/invalidToken'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          description: "Product not found"
        '500':
          $ref: '#/components/responses/serverError'
    
  
  /users:
  
    get:
      tags:
        - "Users"
      summary: Returns a list of users.
      description: "Role required: Admin"
      security:
        - tokenAuthorization: []
      responses:
        '200':
          description: JSON array of users
          content:
            application/json:
              schema: 
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/userData'
        '401':
          $ref: '#/components/responses/invalidToken'
        '403':
          $ref: '#/components/responses/forbidden'
        '500':
          $ref: '#/components/responses/serverError'
          
    post:
      tags:
        - "Users"
      summary: Creates a user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 5
                  maxLength: 40
                username:
                  type: string
                  minLength: 6
                  maxLength: 15
                email:
                  type: string
                address:
                  type: string
                phone_number:
                  type: string
                  minLength: 10
                  maxLength: 15
                  example: "11 23456789"
                password:
                  type: string
                  minLength: 8
                  maxLength: 20
      responses: 
        '201':
          description: "User created"
        '400':
          description: "Request body incomplete or malformed"
        '409':
          description: "User already exists"
        '422':
          $ref: '#/components/responses/invalid'
        '500':
          $ref: '#/components/responses/serverError'
          
          
  /users/admin:
  
    post:
      tags:
        - "Users"
      security:
        - tokenAuthorization: []
      summary: Creates an admin user.
      description: "Role required: Admin"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 5
                  maxLength: 40
                username:
                  type: string
                  minLength: 6
                  maxLength: 15
                email:
                  type: string
                password:
                  type: string
                  minLength: 8
                  maxLength: 20
      responses: 
        '201':
          description: "User created"
        '400':
          description: "Request body incomplete or malformed"
        '401':
          $ref: '#/components/responses/invalidToken'
        '403':
          $ref: '#/components/responses/forbidden'
        '409':
          description: "User already exists"
        '422':
          $ref: '#/components/responses/invalid'
        '500':
          $ref: '#/components/responses/serverError'
        
        
  /login:
    
    post:
      tags:
        - "Users"
      summary: User login.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: string
                  example: "username or email"
                password:
                  type: string
                  
      responses: 
        '200':
          description: "Login successful"
          content:
            application/json:
              schema: 
                type: object
                properties:
                  token:
                    type: string
        '400':
          description: "Request body incomplete or malformed"
        '401':
          description: "Wrong user or password"
        '500':
          $ref: '#/components/responses/serverError'
          
          
  /users/{userId}:
    get:
      tags:
        - "Users"
      summary: Returns a user by ID.
      description: "Role required: Admin"
      security:
        - tokenAuthorization: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type : integer
            minimum: 1
      responses: 
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/userData'
        '401':
          $ref: '#/components/responses/invalidToken'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          description: "User not found"
        '500':
          $ref: '#/components/responses/serverError'
          
          
    delete:
      tags:
        - "Users"
      summary: Deletes a user by ID.
      description: "Role required: Admin"
      security:
        - tokenAuthorization: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
      responses: 
        '204':
          description: "User deleted"
        '401':
          $ref: '#/components/responses/invalidToken'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          description: "User not found"
        '500':
          $ref: '#/components/responses/serverError'
          
  /users/me:
  
    get:
      tags:
        - "Users"
      summary: Returns the logged-in user.
      security:
        - tokenAuthorization: []
      responses: 
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/userData'
        '401':
          $ref: '#/components/responses/invalidToken'
        '404':
          description: "User not found"
        '500':
          $ref: '#/components/responses/serverError'
    
    
    patch:
      tags:
        - "Users"
      summary: Updates logged-in user.
      security:
        - tokenAuthorization: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 5
                  maxLength: 40
                username:
                  type: string
                  minLength: 6
                  maxLength: 15
                email:
                  type: string
                address:
                  type: string
                phone_number:
                  type: string
                  minLength: 10
                  maxLength: 15
                  example: "11 23456789"
                password:
                  type: string
                  minLength: 8
                  maxLength: 20
      responses: 
        '200':
          description: "User updated"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:  
                    $ref: '#/components/schemas/userData'
        '400':
          description: "At least one valid property is required"
        '401':
          $ref: '#/components/responses/invalidToken'
        '404':
          description: "User not found"
        '409':
          description: "Another user with the same username or email exists"
        '422':
          $ref: '#/components/responses/invalid'
        '500':
          $ref: '#/components/responses/serverError'
          
    delete:
      tags:
        - "Users"
      summary: Deletes logged-in user.
      security:
        - tokenAuthorization: []
      responses: 
        '204':
          description: "User deleted"
        '401':
          $ref: '#/components/responses/invalidToken'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          description: "User not found"
        '500':
          $ref: '#/components/responses/serverError'


  /users/me/orders:
    get:
      tags:
        - "Orders"
      summary: Returns a list of a logged-in user's orders.
      security:
        - tokenAuthorization: []
      responses: 
        '200':
          description: JSON array of orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/orderData'
        '401':
          $ref: '#/components/responses/invalidToken'
        '404':
          description: "No orders"
        '500':
          $ref: '#/components/responses/serverError'
          
  /users/me/orders/{orderId}:
    get:
      tags:
        - "Orders"
      summary: Returns a logged-in user's order by ID.
      security:
        - tokenAuthorization: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
      responses: 
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/orderDataUserExt'
        '401':
          $ref: '#/components/responses/invalidToken'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          description: "Order not found"
        '500':
          $ref: '#/components/responses/serverError'
  

  /orders:
  
    get:
      tags:
        - "Orders"
      summary: Returns a list of orders.
      description: "Role required: Admin"
      security:
        - tokenAuthorization: []
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
        - name: date
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum:
              - nuevo
              - confirmado
              - preparando
              - enviando
              - entregado
              - cancelado
      responses:
        '200':
          description: JSON array of orders
          content:
            application/json:
              schema: 
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/orderData'
        '401':
          $ref: '#/components/responses/invalidToken'
        '403':
          $ref: '#/components/responses/forbidden'
        '500':
          $ref: '#/components/responses/serverError'
          
    post:
      tags:
        - "Orders"
      summary: Creates an order.
      description: "This can only be done by the logged in user."
      security:
        - tokenAuthorization: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                products:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                        minimum: 1
                      quantity:
                        type: integer
                        minimum: 1
                payment_method:
                  type: string
                  enum:
                    - efectivo
                    - tarjeta

      responses: 
        '201':
          description: "Order created"
          content:
            application/json:
              schema: 
                type: object
                properties:
                  order_id:
                    type: integer
        '400':
          description: "Request body missing or malformed"
        '401':
          $ref: '#/components/responses/invalidToken'
        '403':
          $ref: '#/components/responses/forbidden'
        '422':
          $ref: '#/components/responses/invalid'
        '500':
          $ref: '#/components/responses/serverError'
          
  /orders/{orderId}:
  
    get:
      tags:
        - "Orders"
      summary: Returns an order by ID.
      description: "Role required: Admin"
      security:
        - tokenAuthorization: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type : integer
            minimum: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/orderDataAdmnExt'
        '401':
          $ref: '#/components/responses/invalidToken'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          description: "Order not found"
        '500':
          $ref: '#/components/responses/serverError'
    
          
    patch:
      tags:
        - "Orders"
      summary: Updates order status by ID.
      description: "Role required: admin"
      security:
        - tokenAuthorization: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type : integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum:
                    - nuevo
                    - confirmado
                    - preparando
                    - enviando
                    - entregado
                    - cancelado
      responses: 
        '200':
          description: "Order updated"
        '400':
          description: "Request body invalid or malformed"
        '401':
          $ref: '#/components/responses/invalidToken'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          description: "Order not found"
        '500':
          $ref: '#/components/responses/serverError'
          
    delete:
      tags:
        - "Orders"
      summary: Deletes an order by ID.
      description: "Role required: Admin"
      security:
        - tokenAuthorization: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type : integer
            minimum: 1
      responses: 
        '204':
          description: "Order deleted"
        '401':
          $ref: '#/components/responses/invalidToken'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          description: "Order not found"
        '500':
          $ref: '#/components/responses/serverError'


  
components:

  schemas:
  
    productData:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
          keyword:
            type: string
          price:
            type: number
          photo_url:
            type: string
          stock:
            type: integer
  
    userData:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        username:
          type: string
        email:
          type: string
        address:
          type: string
        phone_number:
          type: string
          example: "11 23456789"
        admin:
          type: boolean
          default: false

    orderData:
      type: object
      properties:
        id:
          type: integer
        address:
          type: string
        total:
          type: number
          format: double
        payment_method:
          type: string
          enum:
            - efectivo
            - tajerta
        status:
          type: string
        time:
          type: string
          example: "16:04:05"
        date:
          type: string
          format: date
        user:
          type: object
          properties:
            user_id:
              type: integer
            name_lastname:
              type: string
        products:
          type: array
          items:
            type: object
            properties:
              product_id:
                type: integer
              keyword:
                type: string
              quantity:
                type: integer
                
    orderDataUserExt:
      type: object
      properties:
        id:
          type: integer
        address:
          type: string
        total:
          type: number
          format: double
        payment_method:
          type: string
          enum:
            - efectivo
            - tajerta
        status:
          type: string
        timestamp:
          type: string
          example: "2020-01-14 16:04:05"
        user:
          type: object
          properties:
            user_id:
              type: integer
            name_lastname:
              type: string
        products:
          type: array
          items:
            $ref: '#/components/schemas/orderProductExt'
            
    orderDataAdmnExt:
      type: object
      properties:
        id:
          type: integer
        address:
          type: string
        total:
          type: number
          format: double
        payment_method:
          type: string
          enum:
            - efectivo
            - tajerta
        status:
          type: string
        timestamp:
          type: string
          example: "2020-01-14 16:04:05"
        user:
          type: object
          properties:
            user_id:
              type: integer
            name_lastname:
              type: string
            username:
              type: string
            email:
              type: string
            phone_number:
              type: string
            status:
              type: string
        products:
          type: array
          items:
            $ref: '#/components/schemas/orderProductExt'
            
    orderProductExt:
      type: object
      properties:
        product_id:
          type: integer
        keyword:
          type: string
        quantity:
          type: integer
        product_name:
          type: string
        price:
          type: number
          format: double
        photo_url:
          type: string
        status:
              type: string

 
  securitySchemes:
    tokenAuthorization:
      type: http
      scheme: bearer
      
      
  responses:
    invalidToken:
      description: "Token missing or invalid"
    serverError:
      description: "Unexpected error"
    forbidden:
      description: "Not allowed"
    invalid:
      description: "Invalid property value"
      