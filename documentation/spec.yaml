openapi: 3.0.0

info:
  title: Delilah Resto API
  description: Food delivery
  version: 1.0.0

  
tags:
- name: "Products"
  description: "Operations about products"
- name: "Users"
  description: "Operations about users"
- name: "Orders"
  description: "Operations about orders"
 
paths:

  /products:
  
    get:
      tags:
        - "Products"
      summary: "Returns a list of products."
      description: "This can only be done by the logged in user."
      security:
        - tokenAuthorization: []
      responses:
        '200':
          description: "JSON array of products"
          content:
            application/json:
              schema: 
                type: array
                items: 
                  $ref: '#/components/schemas/productData'
        '401':
          $ref: '#/components/responses/invalidToken'
        '500':
          $ref: '#/components/responses/serverError'
                  
    post:
      tags:
        - "Products"
      summary: "Creates a product."
      security:
        - tokenAuthorization: []
      description: "Role required: Admin"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                keyword:
                  type: string
                price:
                  type: number
                  format: double
                  minimum: 0
                photo_url:
                  type: string
                stock:
                  type: integer
                  minimum: 0
      responses: 
        '201':
          description: "Product created"
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/productData'
        '400':
          description: "Request body incomplete or malformed"
        '401':
          $ref: '#/components/responses/invalidToken'
        '403':
          $ref: '#/components/responses/forbidden'
        '409':
          description: "Product already exists"
        '500':
          $ref: '#/components/responses/serverError'
          
   
  /products/{productId}:
    get:
      tags:
        - "Products"
      summary: Returns a product by ID.
      security:
        - tokenAuthorization: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type : integer
            minimum: 1
      responses: 
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/productData'
        '401':
          $ref: '#/components/responses/invalidToken'
        '404':
          description: "Product not found"
        '500':
          $ref: '#/components/responses/serverError'
          
    patch:
      tags:
        - "Products"
      summary: Modifies a product by ID.
      description: "Role required: Admin"
      security:
        - tokenAuthorization: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type : integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                keyword:
                  type: string
                price:
                  type: number
                  format: double
                  minimum: 0
                photo_url:
                  type: string
                stock:
                  type: integer
                  minimum: 0
      responses: 
        '200':
          description: Modified product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/productData'
        '400':
          description: "At least one valid property is required"
        '401':
          $ref: '#/components/responses/invalidToken'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          description: "Product not found"
        '409':
          description: "Another product with the same name or keyword exists"
        '500':
          $ref: '#/components/responses/serverError'
          
    delete:
      tags:
        - "Products"
      summary: Deletes a product by ID.
      description: "Role required: Admin"
      security:
        - tokenAuthorization: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type : integer
            minimum: 1
      responses: 
        '204':
          description: "Product deleted"
        '401':
          $ref: '#/components/responses/invalidToken'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          description: "Product not found"
        '500':
          $ref: '#/components/responses/serverError'
    
    
  /users:
  
    get:
      tags:
        - "Users"
      summary: Returns a list of users.
      security:
        - tokenAuthorization: []
      parameters:
        - name: token
          in: header
          description: "Role required: Admin"
          required: true
          schema:
            type: string
      responses:
        '200':
          description: JSON array of users
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/userData'
                  
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/invalidToken'
        '500':
          description: Internal server error
          
    post:
      tags:
        - "Users"
      summary: Creates a user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                userName:
                  type: string
                  minLength: 6
                  maxLength: 18
                email:
                  type: string
                address:
                  type: string
                phoneNumber:
                  type: number
                password:
                  type: string
                  minLength: 6
      responses: 
        '201':
          description: User created
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/userData'
                  
        '400':
          description: Bad request
        '409':
          description: User already exists
        '500':
          description: Internal server error
          
          
  /users/admin:
  
    post:
      tags:
        - "Users"
      security:
        - tokenAuthorization: []
      summary: Creates an admin user.
      parameters:
        - name: token
          in: header
          description: "Role required: Admin"
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                userName:
                  type: string
                  minLength: 6
                  maxLength: 18
                email:
                  type: string
                password:
                  type: string
                  minLength: 6
      responses: 
        '201':
          description: User created
          content:
            application/json:
              schema: 
                type: object
                properties:
                  id:
                    type: number
                  name:
                    type: string
                  userName:
                    type: string
                  email:
                    type: string
                  admin:
                    type: boolean
                    default: true
                  
        '400':
          description: Bad request
        '401':
          description: API key is missing or invalid
        '409':
          description: User already exists
        '500':
          description: Internal server error
        
          
  /login:
    
    post:
      tags:
        - "Users"
      summary: User login.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: string
                  example: "username or email"
                password:
                  type: string
                  
      responses: 
        '200':
          description: Login successful
          content:
            application/json:
              schema: 
                type: object
                properties: #revisar
                  token:
                    type: string
                  userId:
                    type: number
                  
        '400':
          description: Bad request / wrong user or password
        '500':
          description: Internal server error
          
                  
  /users/{userId}:
    get:
      tags:
        - "Users"
      summary: Returns a user by ID.
      #description: "This can only be done by the logged in user."
      security:
        - tokenAuthorization: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
        - name: token
          in: header
          description: "Role required: Admin"
          required: true
          schema:
            type: string
      responses: 
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userData'
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/invalidToken'
        '404':
          description: User not found
        '500':
          description: Internal server error
          
          
    delete:
      tags:
        - "Users"
      summary: Deletes a user by ID.
      #description: "This can only be done by the logged in user."
      security:
        - tokenAuthorization: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
        - name: token
          in: header
          description: "Role required: Admin"
          required: true
          schema:
            type: string
      responses: 
        '204':
          description: User deleted
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/invalidToken'
        '404':
          description: User not found
        '500':
          description: Internal server error
          
  /users/me:
  
    get:
      tags:
        - "Users"
      summary: Returns the logged in user.
      #description: "This can only be done by the logged in user."
      security:
        - tokenAuthorization: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
        - name: token
          in: header
          required: true
          schema:
            type: string
      responses: 
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userData'
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/invalidToken'
        '404':
          description: User not found
        '500':
          description: Internal server error
    
    
    patch:
      tags:
        - "Users"
      summary: Modifies logged in user.
      #description: "This can only be done by the logged in user."
      security:
        - tokenAuthorization: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
        - name: token
          in: header
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                userName:
                  type: string
                  minLength: 6
                  maxLength: 18
                email:
                  type: string
                address:
                  type: string
                phoneNumber:
                  type: number
                password:
                  type: string
                  minLength: 6
      responses: 
        '200':
          description: Modified user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userData'
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/invalidToken'
        '404':
          description: User not found
        '500':
          description: Internal server error
          
    delete:
      tags:
        - "Users"
      summary: Deletes logged in user.
      #description: "This can only be done by the logged in user."
      security:
        - tokenAuthorization: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
        - name: token
          in: header
          description: "Role required: Admin"
          required: true
          schema:
            type: string
      responses: 
        '204':
          description: User deleted
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/invalidToken'
        '404':
          description: User not found
        '500':
          description: Internal server error

    
          
  /users/me/orders:
    get:
      tags:
        - "Orders"
      summary: Returns a list of orders of the logged in user.
      #description: "This can only be done by the logged in user."
      security:
        - tokenAuthorization: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
        - name: token
          in: header
          required: true
          schema:
            type: string
      responses: 
        '200':
          description: JSON array of orders
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/orderData'
    
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/invalidToken'
        '404':
          description: User not found
        '500':
          description: Internal server error
   
          
          
  /orders:
  
    get: #que tiene que devolver?
      tags:
        - "Orders"
      summary: Returns a list of orders.
      security:
        - tokenAuthorization: []
      parameters:
        - name: token
          in: header
          description: "Role required: Admin"
          required: true
          schema:
            type: string
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum:
              - nuevo
              - confirmado
              - preparando
              - enviando
              - entregado
              - cancelado
      responses:
        '200':
          description: JSON array of orders
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/orderData'
                  
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/invalidToken'
        '500':
          description: Internal server error
          
    post:
      tags:
        - "Orders"
      summary: Creates an order.
      description: "This can only be done by the logged in user."
      security:
        - tokenAuthorization: []
      parameters:
        - name: token
          in: header
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                products: #revisar
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: number
                      quantity:
                        type: integer
                        format: int64
                        minimum: 1
                total:
                  type: number
               # userId:
                #  type: number
                paymentMethod:
                  type: string

      responses: 
        '201':
          description: order created
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/orderData'
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/invalidToken'
        '500':
          description: Internal server error
          
  /orders/{orderId}:
  
    get: #hace falta? admin o user o ambos?
      tags:
        - "Orders"
      summary: Returns an order by ID.
      description: "This can only be done by the logged in user."
      security:
        - tokenAuthorization: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
        - name: token
          in: header
          required: true
          schema:
            type: string
        
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/orderData'
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/invalidToken'
        '404':
          description: Order not found
        '500':
          description: Internal server error
    
          
    patch:
      tags:
        - "Orders"
      summary: Modifies order status by ID.
      security:
        - tokenAuthorization: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
        - name: token
          in: header
          description: "Role required: admin"
          required: true
          schema:
            type: string
       # - name: status
        #  in: query
         # required: true
          #schema:
           # type: string
            #enum:
             # - nuevo
              #- confirmado
          #    - preparando
           #   - enviando
            #  - entregado
             # - cancelado
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  
            
      responses: 
        '200':
          description: Modified status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orderData'
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/invalidToken'
        '404':
          description: Order not found
        '500':
          description: Internal server error
          
    delete:
      tags:
        - "Orders"
      summary: Deletes an order by ID.
      security:
        - tokenAuthorization: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type : integer
            format: int64
            minimum: 1
        - name: token
          in: header
          description: "Role required: Admin"
          required: true
          schema:
            type: string
      responses: 
        '204':
          description: Order cancelled
        '400':
          description: Bad request
        '401':
          $ref: '#/components/responses/invalidToken'
        '404':
          description: Order not found
        '500':
          description: Internal server error
    
    
  
components:

  schemas:
  
    productData:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        keyword:
          type: string
        price:
          type: number
        photo_url:
          type: string
        stock:
          type: integer
  
    userData:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        userName:
          type: string
        email:
          type: string
        address:
          type: string
        phoneNumber:
          type: number
        admin:
          type: boolean
          default: false

    orderData:
      type: object
      properties:
        orderId:
          type: number
        products: #revisar
          type: array
          items:
            type: object
            properties:
              id:
                type: number
             # name:
              #  type: string
              #keyword:
               # type: string
              #price:
               # type: number
              quantity:
                type: integer
                format: int64
                minimum: 1
              #photoUrl:
               # type: string
        total:
          type: number
        userId:
          type: number
        #user: #revisar
          #type: object
          #properties:
            #id:
             # type: number
            #name:
             # type: string
            #userName:
             # type: string
            #email:
             # type: string
            #address:
             # type: string
            #phoneNumber:
             # type: number
        paymentMethod:
          type: string
        timeStamp:
          type: string
        date:
          type: string
        status:
          type: string

        
          
  securitySchemes:
    tokenAuthorization:
      type: http
      scheme: bearer
      
      
  responses:
    invalidToken:
      description: "Token missing or invalid"
    serverError:
      description: "Unexpected error"
    forbidden:
      description: "Not allowed"
      
    
          
 